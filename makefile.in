prefix                        = @prefix@
exec_prefix                   = @exec_prefix@
bindir                        = @bindir@
srcdir                        = @srcdir@
sysroot                       = $(prefix)/mips64/n64-sysroot
export PATH                  := $(bindir):$(PATH)
PROGS                         = gfxdis grc libgru libgs luapatch
INSTALLPROGS                  = $(foreach prog,$(PROGS),install-$(prog))
CLEANPROGS                    = $(foreach prog,$(PROGS),clean-$(prog))
DISTCLEANPROGS                = $(foreach prog,$(PROGS),distclean-$(prog))
BINUTILS_VERSION              = @BINUTILS_VERSION@
GCC_VERSION                   = @GCC_VERSION@
NEWLIB_VERSION                = @NEWLIB_VERSION@
BINUTILS_URL                  = https://ftp.gnu.org/gnu/binutils/$(BINUTILS_VERSION).tar.gz
GCC_URL                       = https://ftp.gnu.org/gnu/gcc/$(GCC_VERSION)/$(GCC_VERSION).tar.gz
NEWLIB_URL                    = https://sourceware.org/pub/newlib/$(NEWLIB_VERSION).tar.gz
CONFIG_BINUTILS               = @CONFIG_BINUTILS@
CONFIG_GCC                    = @CONFIG_GCC@
CONFIG_NEWLIB                 = @CONFIG_NEWLIB@
LDFLAGS                       = @LDFLAGS@
CFLAGS_FOR_TARGET             = @CFLAGS_FOR_TARGET@
CXXFLAGS_FOR_TARGET           = @CXXFLAGS_FOR_TARGET@
INSTALL                       = @INSTALL@

.PHONY                        : all install clean distclean $(PROGS) $(INSTALLPROGS) $(CLEANPROGS) $(DISTCLEANPROGS)
.PHONY                        : configure-binutils configure-gcc configure-newlib clean-binutils clean-gcc clean-newlib
.PHONY                        : install-sys clean-sys remove-sys install-toolchain

all                           : $(PROGS)
install                       : $(INSTALLPROGS)
clean                         : $(CLEANPROGS) clean-binutils clean-gcc clean-newlib clean-sys
distclean                     : $(DISTCLEANPROGS)
	rm -f config.log config.status makefile
quickclean                    : $(CLEANPROGS) quickclean-binutils quickclean-gcc quickclean-newlib clean-sys
$(PROGS)                      :
	cd src/$@ && $(MAKE)
$(INSTALLPROGS)               :
	cd src/$(patsubst install-%,%,$@) && $(MAKE) install
$(CLEANPROGS)                 :
	cd src/$(patsubst clean-%,%,$@) && $(MAKE) clean
$(DISTCLEANPROGS)             :
	cd src/$(patsubst distclean-%,%,$@) && $(MAKE) distclean

binutils.tar.gz               :
	wget -O binutils.tar.gz "$(BINUTILS_URL)"
binutils                      : binutils.tar.gz
	mkdir binutils
	tar xfv binutils.tar.gz --strip-components=1 -C binutils
build-binutils/config.status  : binutils
	if [ ! -d build-binutils ]; then mkdir build-binutils; fi
	cd build-binutils && ../binutils/configure --prefix="$(prefix)"                         \
	                                           --target=mips64                              \
	                                           --with-sysroot="$(sysroot)"                  \
	                                           --disable-nls                                \
	                                           LDFLAGS="$(LDFLAGS)"                         \
	                                           CFLAGS_FOR_TARGET="$(CFLAGS_FOR_TARGET)"     \
	                                           CXXFLAGS_FOR_TARGET="$(CXXFLAGS_FOR_TARGET)" \
	                                           $(CONFIG_BINUTILS)
configure-binutils            : build-binutils/config.status
make-binutils                 : configure-binutils
	cd build-binutils && $(MAKE) all
	touch $@
install-binutils              : make-binutils
	cd build-binutils && $(MAKE) install
	touch $@
clean-binutils                :
	rm -rf binutils.tar.gz binutils build-binutils make-binutils install-binutils
quickclean-binutils           :
	rm -rf build-binutils make-binutils install-binutils

gcc.tar.gz                    :
	wget -O gcc.tar.gz "$(GCC_URL)"
gcc                           : gcc.tar.gz
	mkdir gcc
	tar xfv gcc.tar.gz --strip-components=1 -C gcc
	cd gcc && ./contrib/download_prerequisites
build-gcc/config.status       : gcc
	if [ ! -d build-gcc ]; then mkdir build-gcc; fi
	cd build-gcc && ../gcc/configure --prefix="$(prefix)"                             \
	                                 --target=mips64                                  \
	                                 --with-arch=vr4300                               \
	                                 --with-abi=32                                    \
	                                 --with-newlib                                    \
	                                 --with-sysroot="$(sysroot)"                      \
	                                 --with-native-system-header-dir="//usr/include"  \
	                                 --enable-languages=c,c++,lto                     \
	                                 --enable-sjlj-exceptions                         \
	                                 --disable-multilib                               \
	                                 --disable-threads                                \
	                                 --disable-nls                                    \
	                                 LDFLAGS="$(LDFLAGS)"                             \
	                                 CFLAGS_FOR_TARGET="$(CFLAGS_FOR_TARGET)"         \
	                                 CXXFLAGS_FOR_TARGET="$(CXXFLAGS_FOR_TARGET)"     \
	                                 $(CONFIG_GCC)
configure-gcc                 : build-gcc/config.status
make-gcc-executables          : configure-gcc
	cd build-gcc && $(MAKE) all-gcc
	touch $@
install-gcc-executables       : make-gcc-executables
	cd build-gcc && $(MAKE) install-gcc
	touch $@
make-gcc                      : configure-gcc install-binutils install-newlib
	cd build-gcc && $(MAKE) all
	touch $@
install-gcc                   : make-gcc
	cd build-gcc && $(MAKE) install
	touch $@
clean-gcc                     :
	rm -rf gcc.tar.gz gcc build-gcc make-gcc-executables install-gcc-executables make-gcc install-gcc
quickclean-gcc                :
	rm -rf build-gcc make-gcc-executables install-gcc-executables make-gcc install-gcc

newlib.tar.gz                 :
	wget -O newlib.tar.gz "$(NEWLIB_URL)"
newlib                        : newlib.tar.gz
	mkdir newlib
	tar xfv newlib.tar.gz --strip-components=1 -C newlib
build-newlib/config.status    : newlib install-binutils install-gcc-executables
	if [ ! -d build-newlib ]; then mkdir build-newlib; fi
	cd build-newlib && ../newlib/configure --prefix="$(prefix)"                         \
	                                       --target=mips64                              \
	                                       --with-newlib                                \
	                                       --enable-newlib-global-atexit                \
	                                       --disable-newlib-fvwrite-in-streamio         \
	                                       --disable-newlib-wide-orient                 \
	                                       --enable-newlib-nano-malloc                  \
	                                       --disable-newlib-unbuf-stream-opt            \
	                                       --disable-newlib-supplied-syscalls           \
	                                       --enable-lite-exit                           \
	                                       LDFLAGS="$(LDFLAGS)"                         \
	                                       CFLAGS_FOR_TARGET="$(CFLAGS_FOR_TARGET)"     \
	                                       CXXFLAGS_FOR_TARGET="$(CXXFLAGS_FOR_TARGET)" \
	                                       $(CONFIG_NEWLIB)
configure-newlib              : build-newlib/config.status
make-newlib                   : configure-newlib install-binutils install-gcc-executables
	cd build-newlib && $(MAKE) all
	touch $@
install-newlib                : make-newlib
	cd build-newlib && $(MAKE) install
	touch $@
clean-newlib                  :
	rm -rf newlib.tar.gz newlib build-newlib make-newlib install-newlib
quickclean-newlib             :
	rm -rf build-newlib make-newlib install-newlib

install-sys                   :
	$(INSTALL) -d "$(sysroot)/usr"
	cp -p -r -u "$(srcdir)/include" "$(srcdir)/lib" "$(sysroot)/usr"
	touch $@
clean-sys                     :
	rm -f install-sys
remove-sys                    : clean-sys
	rm -rf "$(sysroot)/usr/include" "$(sysroot)/usr/lib"

install-toolchain             : install-binutils install-gcc install-newlib install-sys
